package com.anye.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.table.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Quantity = new Property(2, Integer.class, "quantity", false, "QUANTITY");
        public final static Property Price = new Property(3, Float.class, "price", false, "PRICE");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property SaleId = new Property(5, Long.class, "saleId", false, "SALE_ID");
        public final static Property Picpath = new Property(6, String.class, "picpath", false, "PICPATH");
    }


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"QUANTITY\" INTEGER NOT NULL ," + // 2: quantity
                "\"PRICE\" REAL NOT NULL ," + // 3: price
                "\"DESCRIPTION\" TEXT NOT NULL ," + // 4: description
                "\"SALE_ID\" INTEGER NOT NULL ," + // 5: saleId
                "\"PICPATH\" TEXT NOT NULL );"); // 6: picpath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getQuantity());
        stmt.bindDouble(4, entity.getPrice());
        stmt.bindString(5, entity.getDescription());
        stmt.bindLong(6, entity.getSaleId());
        stmt.bindString(7, entity.getPicpath());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getQuantity());
        stmt.bindDouble(4, entity.getPrice());
        stmt.bindString(5, entity.getDescription());
        stmt.bindLong(6, entity.getSaleId());
        stmt.bindString(7, entity.getPicpath());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // quantity
            cursor.getFloat(offset + 3), // price
            cursor.getString(offset + 4), // description
            cursor.getLong(offset + 5), // saleId
            cursor.getString(offset + 6) // picpath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setQuantity(cursor.getInt(offset + 2));
        entity.setPrice(cursor.getFloat(offset + 3));
        entity.setDescription(cursor.getString(offset + 4));
        entity.setSaleId(cursor.getLong(offset + 5));
        entity.setPicpath(cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Product entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
